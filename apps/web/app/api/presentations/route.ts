import { generateObject, generateText } from 'ai'
import { NextRequest, NextResponse } from 'next/server'

import createSupabaseClient from '@/clients/factories/supabase'
import withNextResponseJsonError from '@/decorators/with-next-response-json-error'
import requireAccessToken from '@/guards/require-access-token'
import { APIPresentationSchema } from '@/schemas/presentation'
import getUserProfile from '@/services/google/get-user-profile'

import anthropic from '@/clients/anthropic'
import prebuiltRequestsSchema from '@/prebuilt-requests'
import { z } from 'zod'
import {
	prebuiltRequestsToAPIRequests,
	updatePresentation,
} from './[id]/chat/route'

async function postPresentation(request: NextRequest) {
	const accessToken = await requireAccessToken(request.cookies)

	const { prompt } = await request.json()

	const { object } = await generateObject({
		model: anthropic('claude-4-sonnet-20250514'),
		system:
			'You are in charge of initializing a new presentation based on the user prompt, you should generate a title for it and the update requests. By default, the first slide is going to be deleted, then, the update requests generated by you are going to be run. Always remember to use relevant information, if you use informative elements, you always should use all the columns and rows available in any distribution you want, but using them all. You should add images and charts when appropiate also as emojis for visual memory. Generate a maximum of 5 slides. You should start by creating an opening section slide, with the title of the presentation and a subtitle, then, create four informative slides for each of the points about the theme you are going to treat across the presentation, for each created slide, create the informative elements for it.',
		prompt,
		schema: z.object({
			title: z.string().min(1).describe('Title for the presentation'),
			update: prebuiltRequestsSchema,
		}),
	})

	const response = await fetch(
		'https://slides.googleapis.com/v1/presentations',
		{
			method: 'POST',
			headers: {
				Authorization: `Bearer ${accessToken}`,
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				title: object.title,
			}),
		}
	)

	if (!response.ok) throw new Error('FAILED_TO_CREATE_PRESENTATION')

	const json = await response.json()
	const parsing = APIPresentationSchema.safeParse(json)

	if (!parsing.success) throw new Error('MALFORMED_PRESENTATION')

	const presentation = parsing.data

	await updatePresentation(
		[
			{ deleteObject: { objectId: 'p' } },
			...prebuiltRequestsToAPIRequests(object.update.requests),
		],
		presentation.presentationId,
		accessToken
	)
	const userProfile = await getUserProfile(accessToken)
	const supabase = await createSupabaseClient()

	const { error } = await supabase.from('presentations').insert({
		id: presentation.presentationId,
		user_id: userProfile.id,
		title: presentation.title,
	})

	if (error) throw new Error('FAILED_TO_INSERT_PRESENTATION')

	return NextResponse.json(presentation, { status: 201 })
}

export const POST = await withNextResponseJsonError(postPresentation)
